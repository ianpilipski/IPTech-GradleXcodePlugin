plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '1.1.0'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = 1.8
}

//allow publish key/secret override from environment variable
task setupPluginUpload {
    doLast {
        String key = System.env.gradlePublishKey
        String secret = System.env.gradlePublishSecret
        if(!key || !secret) {
            throw new RuntimeException("gradlePublishKey and/or gradlePublishSecret are not defined environment variables")
        }

        System.properties.setProperty('gradle.publish.key', System.env.gradlePublishKey)
        System.properties.setProperty('gradle.publish.secret', System.env.gradlePublishSecret)
    }
    tasks.publishPlugins.dependsOn(delegate)
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ianpilipski/IPTech-GradleXcodePlugin")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

version = pluginVersion
group 'com.iptech.gradle'
description = 'A plugin that will build xcode projects'

gradlePlugin {
    website = 'https://github.com/ianpilipski/IPTech-GradleXcodePlugin'
    vcsUrl = 'https://github.com/ianpilipski/IPTech-GradleXcodePlugin'
    
    plugins {
        xcodePlugin {
            id = 'com.iptech.gradle.xcode-plugin'
            displayName = 'IPTech Xcode Plugin'
            description = 'A plugin that will build xcode projects'
            implementationClass = 'com.iptech.gradle.xcode.XcodePlugin'
            tags = ['xcode', 'iptech']
        }
    }
}

dependencies {
    implementation gradleApi()
    implementation 'com.googlecode.plist:dd-plist:1.23'
    
    testImplementation('cglib:cglib-nodep:3.3.0')
    testImplementation gradleTestKit()

    testImplementation platform("org.spockframework:spock-bom:2.3-groovy-3.0")
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.spockframework:spock-junit4"  // you can remove this if your code does not rely on old JUnit 4 rules
}

test {
    useJUnitPlatform()

    dependsOn cleanTest
    testLogging {
        showStandardStreams = true
        events "PASSED", "SKIPPED", "FAILED"
    }
}